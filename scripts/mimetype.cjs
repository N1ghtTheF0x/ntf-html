const {fetchCSVs} = require("./mimetype/fetch.cjs")
const {tsType,tsTemplateType} = require("./mimetype/type.cjs")
const {resolve} = require("node:path")
const {writeFile} = require("node:fs/promises")

const OUTPUT_FILE = resolve(__dirname,"..","source","mime.ts")

const MAINTYPE_NAME = "MimeType"
const SUBTYPE_NAME = "Sub"

const REGISTRIES = ["application","audio","font","haptics","image","message","model","multipart","text","video"]

;(async function()
{
    const csvs = await fetchCSVs(REGISTRIES)
    const types = REGISTRIES.map((key,i) =>
    {
        const typeName = firstUppercase(key)
        const subTypeName = SUBTYPE_NAME + typeName
        const csv = csvs[i]
        const names = csv.rows.map(r => r.cells[0]).filter(n => n.length > 0)
        const subType = tsType(subTypeName,...names)
        const mainType = tsTemplateType(typeName,`\`${key}/\${${subTypeName}}\``)
        return `    ${subType}\n    ${mainType}`
    }).join("\n\n")
    const content = [
        "// file is generated by script",
        `export namespace ${MAINTYPE_NAME}`,
        "{",
        types,
        "}",
        "",
        `export type ${MAINTYPE_NAME} = ${REGISTRIES.map(reg => `${MAINTYPE_NAME}.${firstUppercase(reg)}`).join(" | ")}`
    ].join("\n")
    await writeFile(OUTPUT_FILE,content,"utf-8")
})()

function firstUppercase(string)
{
    return string.charAt(0).toUpperCase() + string.slice(1)
}
